#!markdown

# Coffee Model

#!markdown

## Import Flips

#!fsharp

// Import Flips
#r "nuget: Flips, 2.0.1"

#!markdown

## Open Modules

#!fsharp

open System
open Flips
open Flips.Types

#!fsharp

let locations = ["Sellwood"; "Hawthorne"; "The Pearl"; "Eastmoreland"; "St. Johns"; "Alberta"; "Nob Hill"; "Belmont"]

let roasterCost = ["Sellwood", 150000.0; "Hawthorne", 100000.0; "The Pearl", 250000.0; "Eastmoreland", 120000.0; "St. Johns", 130000.0;
                   "Alberta", 110000.0; "Nob Hill", 135000.0; "Belmont", 180000.0] |> Map.ofSeq
                   
let roasterCapacity = ["Sellwood", 12.0; "Hawthorne", 18.0; "The Pearl", 22.0; "Eastmoreland", 13.0;
                       "St. Johns", 14.0; "Alberta", 10.0; "Nob Hill", 17.0; "Belmont", 12.0] |> Map.ofSeq
                       
let warehouseCost = ["Sellwood", 80000.0; "Hawthorne", 90000.0; "The Pearl", 120000.0; "Eastmoreland", 90000.0;
                     "St. Johns", 85000.0; "Alberta", 70000.0; "Nob Hill", 85000.0; "Belmont", 90000.0] |> Map.ofSeq
                     
let warehouseSize = ["Sellwood", 8000.0; "Hawthorne", 6000.0; "The Pearl", 12000.0; "Eastmoreland", 6000.0;
                     "St. Johns", 7000.0; "Alberta", 9000.0; "Nob Hill", 6000.0; "Belmont", 9200.0] |> Map.ofSeq
                     
let minWarehouseCapacity = 30000.0
let minRoastingCapacity = 30.0

#!markdown

## Step 1: Create Decision Variables

#!fsharp

// Create variables to indicate whether to build a Roaster at a given location
let roasterDecs = 
    DecisionBuilder "BuildRoaster" {
        for location in locations -> Boolean 
    } |> Map.ofSeq
// Create variables to indicate whether or not to build a Warehouse at a given location
let warehouseDecs =
    DecisionBuilder "BuildWarehouse" {
        for location in locations -> Boolean
    } |> Map.ofSeq

#!markdown

## Step 2: Create the Objective

#!fsharp

// Create an objective expression (Sum of the costs of Roasters and Warehouses)
let objectiveExpression = [for location in locations -> (roasterCost.[location]*roasterDecs.[location]+warehouseCost.[location]*warehouseDecs.[location])] |> List.sum
// Create the Objective (minimize cost)
let objective = Objective.create "MinimizeCost" Minimize objectiveExpression

#!markdown

## Step 3: Add Constraints

#!fsharp

// Total Roasting capacity must be greater than 30 tons
let roastingCapExpression = [for location in locations -> roasterCapacity.[location]*roasterDecs.[location]] |> List.sum
let roastingCapConstraint = Constraint.create "MinRoastingCapacity" (roastingCapExpression >== minRoastingCapacity)
// Total Warehouse size must be greater than 30000 sq. ft.
let warehouseSizeExpression = [for location in locations -> warehouseSize.[location]*roasterDecs.[location]] |> List.sum
let warehouseSizeConstraint = Constraint.create "MinWarehouseSpace" (warehouseSizeExpression >== minWarehouseCapacity)
// Warehouse must exist where there is a roasting plant
let warehouseAndRoasterConstraint = ConstraintBuilder "WarehouseAndRoasterCoexist" { 
    for location in locations ->
    (roasterDecs.[location] <== warehouseDecs.[location])   
}

#!markdown

## Step 4: Create the Model

#!fsharp

// Create the model and add constraints
let model = 
    Model.create objective
    |> Model.addConstraint roastingCapConstraint
    |> Model.addConstraint warehouseSizeConstraint
    |> Model.addConstraints warehouseAndRoasterConstraint

#!markdown

## Step 5: Create the Settings and Solve

#!fsharp

// Create the solver settings
let settings = {
    SolverType = SolverType.CBC
    MaxDuration = 10_000L
    WriteLPFile = None
}

#!fsharp

// Solve the model and save the results
let result = Solver.solve settings model

#!markdown

## Step 6: Print the Results

#!fsharp

printfn "--Results--"
// Print the results of the solver
match result with
    | Suboptimal msg -> printfn "Unable to solve. Error: %s" msg
    | Optimal solution -> 
        printfn "Objective Value: %f" solution.ObjectiveResult
        for (decision, value) in solution.DecisionResults |> Map.toSeq do
            let (DecisionName name) = decision.Name
            printfn "Decision: %s\tValue: %f" name value

    
